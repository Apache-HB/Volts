#include "keys.h"

#include <algorithm>

namespace volts::files::keys
{
    constexpr key npdrm_keys[] = {
        {0x0001000000000000, 0x0001, key_type::npdrm, {0xF9, 0xED, 0xD0, 0x30, 0x1F, 0x77, 0x0F, 0xAB, 0xBA, 0x88, 0x63, 0xD9, 0x89, 0x7F, 0x0F, 0xEA, 0x65, 0x51, 0xB0, 0x94, 0x31, 0xF6, 0x13, 0x12, 0x65, 0x4E, 0x28, 0xF4, 0x35, 0x33, 0xEA, 0x6B}, {0xA5, 0x51, 0xCC, 0xB4, 0xA4, 0x2C, 0x37, 0xA7, 0x34, 0xA2, 0xB4, 0xF9, 0x65, 0x7D, 0x55, 0x40}, {0xB0, 0x5F, 0x9D, 0xA5, 0xF9, 0x12, 0x1E, 0xE4, 0x03, 0x14, 0x67, 0xE7, 0x4C, 0x50, 0x5C, 0x29, 0xA8, 0xE2, 0x9D, 0x10, 0x22, 0x37, 0x9E, 0xDF, 0xF0, 0x50, 0x0B, 0x9A, 0xE4, 0x80, 0xB5, 0xDA, 0xB4, 0x57, 0x8A, 0x4C, 0x61, 0xC5, 0xD6, 0xBF}, {0x00, 0x04, 0x0A, 0xB4, 0x75, 0x09, 0xBE, 0xD0, 0x4B, 0xD9, 0x65, 0x21, 0xAD, 0x1B, 0x36, 0x5B, 0x86, 0xBF, 0x62, 0x0A, 0x98}, 0x11},
        {0x0001000000000000, 0x0002, key_type::npdrm, {0x8E, 0x73, 0x72, 0x30, 0xC8, 0x0E, 0x66, 0xAD, 0x01, 0x62, 0xED, 0xDD, 0x32, 0xF1, 0xF7, 0x74, 0xEE, 0x5E, 0x4E, 0x18, 0x74, 0x49, 0xF1, 0x90, 0x79, 0x43, 0x7A, 0x50, 0x8F, 0xCF, 0x9C, 0x86}, {0x7A, 0xAE, 0xCC, 0x60, 0xAD, 0x12, 0xAE, 0xD9, 0x0C, 0x34, 0x8D, 0x8C, 0x11, 0xD2, 0xBE, 0xD5}, {0x05, 0xBF, 0x09, 0xCB, 0x6F, 0xD7, 0x80, 0x50, 0xC7, 0x8D, 0xE6, 0x9C, 0xC3, 0x16, 0xFF, 0x27, 0xC9, 0xF1, 0xED, 0x66, 0xA4, 0x5B, 0xFC, 0xE0, 0xA1, 0xE5, 0xA6, 0x74, 0x9B, 0x19, 0xBD, 0x54, 0x6B, 0xBB, 0x46, 0x02, 0xCF, 0x37, 0x34, 0x40}, {}, 0x0A},
        {0x0003003000000000, 0x0003, key_type::npdrm, {0x1B, 0x71, 0x5B, 0x0C, 0x3E, 0x8D, 0xC4, 0xC1, 0xA5, 0x77, 0x2E, 0xBA, 0x9C, 0x5D, 0x34, 0xF7, 0xCC, 0xFE, 0x5B, 0x82, 0x02, 0x5D, 0x45, 0x3F, 0x31, 0x67, 0x56, 0x64, 0x97, 0x23, 0x96, 0x64}, {0xE3, 0x1E, 0x20, 0x6F, 0xBB, 0x8A, 0xEA, 0x27, 0xFA, 0xB0, 0xD9, 0xA2, 0xFF, 0xB6, 0xB6, 0x2F}, {0x3F, 0x51, 0xE5, 0x9F, 0xC7, 0x4D, 0x66, 0x18, 0xD3, 0x44, 0x31, 0xFA, 0x67, 0x98, 0x7F, 0xA1, 0x1A, 0xBB, 0xFA, 0xCC, 0x71, 0x11, 0x81, 0x14, 0x73, 0xCD, 0x99, 0x88, 0xFE, 0x91, 0xC4, 0x3F, 0xC7, 0x46, 0x05, 0xE7, 0xB8, 0xCB, 0x73, 0x2D}, {}, 0x08},
        {0x0003004200000000, 0x0004, key_type::npdrm, {0xBB, 0x4D, 0xBF, 0x66, 0xB7, 0x44, 0xA3, 0x39, 0x34, 0x17, 0x2D, 0x9F, 0x83, 0x79, 0xA7, 0xA5, 0xEA, 0x74, 0xCB, 0x0F, 0x55, 0x9B, 0xB9, 0x5D, 0x0E, 0x7A, 0xEC, 0xE9, 0x17, 0x02, 0xB7, 0x06}, {0xAD, 0xF7, 0xB2, 0x07, 0xA1, 0x5A, 0xC6, 0x01, 0x11, 0x0E, 0x61, 0xDD, 0xFC, 0x21, 0x0A, 0xF6}, {0x9C, 0x32, 0x74, 0x71, 0xBA, 0xFF, 0x1F, 0x87, 0x7A, 0xE4, 0xFE, 0x29, 0xF4, 0x50, 0x1A, 0xF5, 0xAD, 0x6A, 0x2C, 0x45, 0x9F, 0x86, 0x22, 0x69, 0x7F, 0x58, 0x3E, 0xFC, 0xA2, 0xCA, 0x30, 0xAB, 0xB5, 0xCD, 0x45, 0xD1, 0x13, 0x1C, 0xAB, 0x30}, {0x00, 0xB6, 0x1A, 0x91, 0xDF, 0x4A, 0xB6, 0xA9, 0xF1, 0x42, 0xC3, 0x26, 0xBA, 0x95, 0x92, 0xB5, 0x26, 0x5D, 0xA8, 0x88, 0x56}, 0x16},
        {0x0003004200000000, 0x0006, key_type::npdrm, {0x8B, 0x4C, 0x52, 0x84, 0x97, 0x65, 0xD2, 0xB5, 0xFA, 0x3D, 0x56, 0x28, 0xAF, 0xB1, 0x76, 0x44, 0xD5, 0x2B, 0x9F, 0xFE, 0xE2, 0x35, 0xB4, 0xC0, 0xDB, 0x72, 0xA6, 0x28, 0x67, 0xEA, 0xA0, 0x20}, {0x05, 0x71, 0x9D, 0xF1, 0xB1, 0xD0, 0x30, 0x6C, 0x03, 0x91, 0x0A, 0xDD, 0xCE, 0x4A, 0xF8, 0x87}, {0x2A, 0x5D, 0x6C, 0x69, 0x08, 0xCA, 0x98, 0xFC, 0x47, 0x40, 0xD8, 0x34, 0xC6, 0x40, 0x0E, 0x6D, 0x6A, 0xD7, 0x4C, 0xF0, 0xA7, 0x12, 0xCF, 0x1E, 0x7D, 0xAE, 0x80, 0x6E, 0x98, 0x60, 0x5C, 0xC3, 0x08, 0xF6, 0xA0, 0x36, 0x58, 0xF2, 0x97, 0x0E}, {}, 0x29},
        {0x0003005000000000, 0x0007, key_type::npdrm, {0x39, 0x46, 0xDF, 0xAA, 0x14, 0x17, 0x18, 0xC7, 0xBE, 0x33, 0x9A, 0x0D, 0x6C, 0x26, 0x30, 0x1C, 0x76, 0xB5, 0x68, 0xAE, 0xBC, 0x5C, 0xD5, 0x26, 0x52, 0xF2, 0xE2, 0xE0, 0x29, 0x74, 0x37, 0xC3}, {0xE4, 0x89, 0x7B, 0xE5, 0x53, 0xAE, 0x02, 0x5C, 0xDC, 0xBF, 0x2B, 0x15, 0xD1, 0xC9, 0x23, 0x4E}, {0xA1, 0x3A, 0xFE, 0x8B, 0x63, 0xF8, 0x97, 0xDA, 0x2D, 0x3D, 0xC3, 0x98, 0x7B, 0x39, 0x38, 0x9D, 0xC1, 0x0B, 0xAD, 0x99, 0xDF, 0xB7, 0x03, 0x83, 0x8C, 0x4A, 0x0B, 0xC4, 0xE8, 0xBB, 0x44, 0x65, 0x9C, 0x72, 0x6C, 0xFD, 0x0C, 0xE6, 0x0D, 0x0E}, {0x00, 0x9E, 0xF8, 0x69, 0x07, 0x78, 0x2A, 0x31, 0x8D, 0x4C, 0xC3, 0x61, 0x7E, 0xBA, 0xCE, 0x24, 0x80, 0xE7, 0x3A, 0x46, 0xF6}, 0x17},
        {0x0003005000000000, 0x0009, key_type::npdrm, {0x07, 0x86, 0xF4, 0xB0, 0xCA, 0x59, 0x37, 0xF5, 0x15, 0xBD, 0xCE, 0x18, 0x8F, 0x56, 0x9B, 0x2E, 0xF3, 0x10, 0x9A, 0x4D, 0xA0, 0x78, 0x0A, 0x7A, 0xA0, 0x7B, 0xD8, 0x9C, 0x33, 0x50, 0x81, 0x0A}, {0x04, 0xAD, 0x3C, 0x2F, 0x12, 0x2A, 0x3B, 0x35, 0xE8, 0x04, 0x85, 0x0C, 0xAD, 0x14, 0x2C, 0x6D}, {0xA1, 0xFE, 0x61, 0x03, 0x5D, 0xBB, 0xEA, 0x5A, 0x94, 0xD1, 0x20, 0xD0, 0x3C, 0x00, 0x0D, 0x3B, 0x2F, 0x08, 0x4B, 0x9F, 0x4A, 0xFA, 0x99, 0xA2, 0xD4, 0xA5, 0x88, 0xDF, 0x92, 0xB8, 0xF3, 0x63, 0x27, 0xCE, 0x9E, 0x47, 0x88, 0x9A, 0x45, 0xD0}, {}, 0x2A},
        {0x0003005500000000, 0x000A, key_type::npdrm, {0x03, 0xC2, 0x1A, 0xD7, 0x8F, 0xBB, 0x6A, 0x3D, 0x42, 0x5E, 0x9A, 0xAB, 0x12, 0x98, 0xF9, 0xFD, 0x70, 0xE2, 0x9F, 0xD4, 0xE6, 0xE3, 0xA3, 0xC1, 0x51, 0x20, 0x5D, 0xA5, 0x0C, 0x41, 0x3D, 0xE4}, {0x0A, 0x99, 0xD4, 0xD4, 0xF8, 0x30, 0x1A, 0x88, 0x05, 0x2D, 0x71, 0x4A, 0xD2, 0xFB, 0x56, 0x5E}, {0x39, 0x95, 0xC3, 0x90, 0xC9, 0xF7, 0xFB, 0xBA, 0xB1, 0x24, 0xA1, 0xC1, 0x4E, 0x70, 0xF9, 0x74, 0x1A, 0x5E, 0x6B, 0xDF, 0x17, 0xA6, 0x05, 0xD8, 0x82, 0x39, 0x65, 0x2C, 0x8E, 0xA7, 0xD5, 0xFC, 0x9F, 0x24, 0xB3, 0x05, 0x46, 0xC1, 0xE4, 0x4B}, {0x00, 0x9A, 0xC6, 0xB2, 0x2A, 0x05, 0x6B, 0xA9, 0xE0, 0xB6, 0xD1, 0x52, 0x0F, 0x28, 0xA5, 0x7A, 0x31, 0x35, 0x48, 0x3F, 0x9F}, 0x27},
        {0x0003005500000000, 0x000C, key_type::npdrm, {0x35, 0x7E, 0xBB, 0xEA, 0x26, 0x5F, 0xAE, 0xC2, 0x71, 0x18, 0x2D, 0x57, 0x1C, 0x6C, 0xD2, 0xF6, 0x2C, 0xFA, 0x04, 0xD3, 0x25, 0x58, 0x8F, 0x21, 0x3D, 0xB6, 0xB2, 0xE0, 0xED, 0x16, 0x6D, 0x92}, {0xD2, 0x6E, 0x6D, 0xD2, 0xB7, 0x4C, 0xD7, 0x8E, 0x86, 0x6E, 0x74, 0x2E, 0x55, 0x71, 0xB8, 0x4F}, {0x00, 0xDC, 0xF5, 0x39, 0x16, 0x18, 0x60, 0x4A, 0xB4, 0x2C, 0x8C, 0xFF, 0x3D, 0xC3, 0x04, 0xDF, 0x45, 0x34, 0x1E, 0xBA, 0x45, 0x51, 0x29, 0x3E, 0x9E, 0x2B, 0x68, 0xFF, 0xE2, 0xDF, 0x52, 0x7F, 0xFA, 0x3B, 0xE8, 0x32, 0x9E, 0x01, 0x5E, 0x57}, {}, 0x3A},
        {0x0003005600000000, 0x000D, key_type::npdrm, {0x33, 0x7A, 0x51, 0x41, 0x61, 0x05, 0xB5, 0x6E, 0x40, 0xD7, 0xCA, 0xF1, 0xB9, 0x54, 0xCD, 0xAF, 0x4E, 0x76, 0x45, 0xF2, 0x83, 0x79, 0x90, 0x4F, 0x35, 0xF2, 0x7E, 0x81, 0xCA, 0x7B, 0x69, 0x57}, {0x84, 0x05, 0xC8, 0x8E, 0x04, 0x22, 0x80, 0xDB, 0xD7, 0x94, 0xEC, 0x7E, 0x22, 0xB7, 0x40, 0x02}, {0x9B, 0xFF, 0x1C, 0xC7, 0x11, 0x8D, 0x23, 0x93, 0xDE, 0x50, 0xD5, 0xCF, 0x44, 0x90, 0x98, 0x60, 0x68, 0x34, 0x11, 0xA5, 0x32, 0x76, 0x7B, 0xFD, 0xAC, 0x78, 0x62, 0x2D, 0xB9, 0xE5, 0x45, 0x67, 0x53, 0xFE, 0x42, 0x2C, 0xBA, 0xFA, 0x1D, 0xA1}, {}, 0x18},
        {0x0003005600000000, 0x000F, key_type::npdrm, {0x13, 0x5C, 0x09, 0x8C, 0xBE, 0x6A, 0x3E, 0x03, 0x7E, 0xBE, 0x9F, 0x2B, 0xB9, 0xB3, 0x02, 0x18, 0xDD, 0xE8, 0xD6, 0x82, 0x17, 0x34, 0x6F, 0x9A, 0xD3, 0x32, 0x03, 0x35, 0x2F, 0xBB, 0x32, 0x91}, {0x40, 0x70, 0xC8, 0x98, 0xC2, 0xEA, 0xAD, 0x16, 0x34, 0xA2, 0x88, 0xAA, 0x54, 0x7A, 0x35, 0xA8}, {0xBB, 0xD7, 0xCC, 0xCB, 0x55, 0x6C, 0x2E, 0xF0, 0xF9, 0x08, 0xDC, 0x78, 0x10, 0xFA, 0xFC, 0x37, 0xF2, 0xE5, 0x6B, 0x3D, 0xAA, 0x5F, 0x7F, 0xAF, 0x53, 0xA4, 0x94, 0x4A, 0xA9, 0xB8, 0x41, 0xF7, 0x6A, 0xB0, 0x91, 0xE1, 0x6B, 0x23, 0x14, 0x33}, {}, 0x3B},
        {0x0003006100000000, 0x0010, key_type::npdrm, {0x4B, 0x3C, 0xD1, 0x0F, 0x6A, 0x6A, 0xA7, 0xD9, 0x9F, 0x9B, 0x3A, 0x66, 0x0C, 0x35, 0xAD, 0xE0, 0x8E, 0xF0, 0x1C, 0x2C, 0x33, 0x6B, 0x9E, 0x46, 0xD1, 0xBB, 0x56, 0x78, 0xB4, 0x26, 0x1A, 0x61}, {0xC0, 0xF2, 0xAB, 0x86, 0xE6, 0xE0, 0x45, 0x75, 0x52, 0xDB, 0x50, 0xD7, 0x21, 0x93, 0x71, 0xC5}, {0x64, 0xA5, 0xC6, 0x0B, 0xC2, 0xAD, 0x18, 0xB8, 0xA2, 0x37, 0xE4, 0xAA, 0x69, 0x06, 0x47, 0xE1, 0x2B, 0xF7, 0xA0, 0x81, 0x52, 0x3F, 0xAD, 0x4F, 0x29, 0xBE, 0x89, 0xAC, 0xAC, 0x72, 0xF7, 0xAB, 0x43, 0xC7, 0x4E, 0xC9, 0xAF, 0xFD, 0xA2, 0x13}, {}, 0x27},
        {0x0003006600000000, 0x0013, key_type::npdrm, {0x26, 0x5C, 0x93, 0xCF, 0x48, 0x56, 0x2E, 0xC5, 0xD1, 0x87, 0x73, 0xBE, 0xB7, 0x68, 0x9B, 0x8A, 0xD1, 0x0C, 0x5E, 0xB6, 0xD2, 0x14, 0x21, 0x45, 0x5D, 0xEB, 0xC4, 0xFB, 0x12, 0x8C, 0xBF, 0x46}, {0x8D, 0xEA, 0x5F, 0xF9, 0x59, 0x68, 0x2A, 0x9B, 0x98, 0xB6, 0x88, 0xCE, 0xA1, 0xEF, 0x4A, 0x1D}, {0x9D, 0x8D, 0xB5, 0xA8, 0x80, 0x60, 0x8D, 0xC6, 0x97, 0x17, 0x99, 0x1A, 0xFC, 0x3A, 0xD5, 0xC0, 0x21, 0x5A, 0x5E, 0xE4, 0x13, 0x32, 0x8C, 0x2A, 0xBC, 0x8F, 0x35, 0x58, 0x9E, 0x04, 0x43, 0x23, 0x73, 0xDB, 0x2E, 0x23, 0x39, 0xEE, 0xF7, 0xC8}, {}, 0x18},
        {0x0003007400000000, 0x0016, key_type::npdrm, {0x79, 0x10, 0x34, 0x04, 0x83, 0xE4, 0x19, 0xE5, 0x5F, 0x0D, 0x33, 0xE4, 0xEA, 0x54, 0x10, 0xEE, 0xEC, 0x3A, 0xF4, 0x78, 0x14, 0x66, 0x7E, 0xCA, 0x2A, 0xA9, 0xD7, 0x56, 0x02, 0xB1, 0x4D, 0x4B}, {0x4A, 0xD9, 0x81, 0x43, 0x1B, 0x98, 0xDF, 0xD3, 0x9B, 0x63, 0x88, 0xED, 0xAD, 0x74, 0x2A, 0x8E}, {0x62, 0xDF, 0xE4, 0x88, 0xE4, 0x10, 0xB1, 0xB6, 0xB2, 0xF5, 0x59, 0xE4, 0xCB, 0x93, 0x2B, 0xCB, 0x78, 0x84, 0x5A, 0xB6, 0x23, 0xCC, 0x59, 0xFD, 0xF6, 0x51, 0x68, 0x40, 0x0F, 0xD7, 0x6F, 0xA8, 0x2E, 0xD1, 0xDC, 0x60, 0xE0, 0x91, 0xD1, 0xD1}, {}, 0x25},
        {0x0004001100000000, 0x0019, key_type::npdrm, {0xFB, 0xDA, 0x75, 0x96, 0x3F, 0xE6, 0x90, 0xCF, 0xF3, 0x5B, 0x7A, 0xA7, 0xB4, 0x08, 0xCF, 0x63, 0x17, 0x44, 0xED, 0xEF, 0x5F, 0x79, 0x31, 0xA0, 0x4D, 0x58, 0xFD, 0x6A, 0x92, 0x1F, 0xFD, 0xB3}, {0xF7, 0x2C, 0x1D, 0x80, 0xFF, 0xDA, 0x2E, 0x3B, 0xF0, 0x85, 0xF4, 0x13, 0x3E, 0x6D, 0x28, 0x05}, {0x63, 0x7E, 0xAD, 0x34, 0xE7, 0xB8, 0x5C, 0x72, 0x3C, 0x62, 0x7E, 0x68, 0xAB, 0xDD, 0x04, 0x19, 0x91, 0x4E, 0xBE, 0xD4, 0x00, 0x83, 0x11, 0x73, 0x1D, 0xD8, 0x7F, 0xDD, 0xA2, 0xDA, 0xF7, 0x1F, 0x85, 0x6A, 0x70, 0xE1, 0x4D, 0xA1, 0x7B, 0x42}, {}, 0x24},
        {0x0004004600000000, 0x001C, key_type::npdrm, {0x81, 0x03, 0xEA, 0x9D, 0xB7, 0x90, 0x57, 0x82, 0x19, 0xC4, 0xCE, 0xDF, 0x05, 0x92, 0xB4, 0x30, 0x64, 0xA7, 0xD9, 0x8B, 0x60, 0x1B, 0x6C, 0x7B, 0xC4, 0x51, 0x08, 0xC4, 0x04, 0x7A, 0xA8, 0x0F}, {0x24, 0x6F, 0x4B, 0x83, 0x28, 0xBE, 0x6A, 0x2D, 0x39, 0x4E, 0xDE, 0x20, 0x47, 0x92, 0x47, 0xC5}, {0x50, 0x31, 0x72, 0xC9, 0x55, 0x13, 0x08, 0xA8, 0x76, 0x21, 0xEC, 0xEE, 0x90, 0x36, 0x2D, 0x14, 0x88, 0x9B, 0xFE, 0xD2, 0xCF, 0x32, 0xB0, 0xB3, 0xE3, 0x2A, 0x4F, 0x9F, 0xE5, 0x27, 0xA4, 0x14, 0x64, 0xB7, 0x35, 0xE1, 0xAD, 0xBC, 0x67, 0x62}, {}, 0x30}
    };
    
    template<typename F, std::size_t N>
    std::optional<key> get_key(const key (&val)[N], F func)
    {
        for(auto k : val)
            if(func(k))
                return k;

        return std::nullopt;
    }

    std::optional<key> get_self_key(key_type type, std::uint16_t rev, std::uint64_t ver)
    {
        switch(type)
        {
        case key_type::lvl0:
        case key_type::lvl1:
        case key_type::lvl2:
        case key_type::app:
        case key_type::disk_img:
        case key_type::loader:
        case key_type::other:
        case key_type::npdrm:
            return get_key(npdrm_keys, [=](auto k) { return k.revision == rev; });
        default:
            return std::nullopt;
        }
    }
}